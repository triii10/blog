<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Odysseus&#39; Adventures</title>
    <link>http://localhost:1313/blog/tags/c/</link>
    <description>Recent content in C on Odysseus&#39; Adventures</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Mar 2024 14:48:31 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C Memory Management Rules</title>
      <link>http://localhost:1313/blog/posts/c-memory-management/</link>
      <pubDate>Wed, 20 Mar 2024 14:48:31 +0000</pubDate>
      <guid>http://localhost:1313/blog/posts/c-memory-management/</guid>
      <description>Reference: SEI CERT C Coding Standard MEM30-C (Do not access freed memory) The following behaviours relating to the use of pointers, after they have been deallocated, are undefined :&#xA;Evaluating a pointer, including dereferencing it Using it as an operand of an arithmetic operation Type-casting it Using it as the right-hand side assignment Such pointers are called dangling pointers. Accessing such pointers can lead to exploitable vulnerabilities.&#xA;Example 1 - #include &amp;lt;stdlib.</description>
    </item>
  </channel>
</rss>
